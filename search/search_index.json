{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for index redirect functionality.</p>"},{"location":"arduino_examples/","title":"Arduino Examples","text":"<p>Now that we have our library and board add-on installed, we can start experimenting with the breakout board. For the scope of this tutorial, we will highlight one of the examples to get started. From there we will be able to build our own custom code to integrate the development board into a project.</p>"},{"location":"arduino_examples/#example-1-nav-sig","title":"Example 1: NAV-SIG","text":"<p>This example shows how to configure the NEO-F10N GNSS for L5 band and overriding the health status. The output will indicate the type of signals that the NEO-F10N is receiving. Head to the example in the NEO-10N folder (located in File Examples &gt; SparkFun u-blox GNSS V3 &gt; NEO-F10N &gt; Example1_NAV-SIG).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board and set the Arduino Serial Monitor to 115200 baud. Give the NEO-F10N a few minutes to get a satellite lock. The signals available will be output in the Serial Monitor. If everything goes well, you should see some L5 signals (highlighted in red).</p>"},{"location":"arduino_examples/#example-12-use-uart","title":"Example 12: Use UART","text":"<p>Note</p> <p>Make sure that you have the latest version of the SparkFun u-blox GNSS v3 Arduino Library when using the \"Use UART\" example. You will need a microcontroller (e.g. ESP32) with enough memory to compile this example.  Depending on the microcontroller that you use, you may also need to adjust the defined serial port from <code>Serial2</code> to <code>Serial1</code>.</p> <p>This example shows how to output your coordinates and satellites in view through the Serial UART. Head to the example in the NEO-10N folder (located in File Examples &gt; SparkFun u-blox GNSS V3 &gt; Basics &gt; Example12_UseUart).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board and set the Arduino Serial Monitor to 115200 baud. Once there are enough satellites in view you should be able to see your coordinates and the number of satellites in view!</p>"},{"location":"arduino_examples/#more-examples","title":"More Examples!","text":"<p>Now that you got it up and running, check out the SparkFun u-blox Arduino Library for other UART examples!</p> SparkFun_u-blox_GNSS_v3 &gt; examples"},{"location":"arduino_library/","title":"Installing the Arduino Library","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using the Arduino IDE, library, or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing Board Definitions in the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul> <p>Note</p> <p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p> <ul> <li>How to Install CH340 Drivers</li> </ul> <p>SparkFun has written a library to work with the u-blox NEO-F10N. You can obtain this library through the Arduino Library Manager by searching for \"SparkFun u-blox GNSS v3\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun u-blox GNSS Arduino Library - v3 (ZIP) <p>Once you have the library installed checkout the various examples! There are several examples in the library that cover more than just the NEO-F10N. Note that some examples will not apply depending on the modules features. We will be looking at the NEO-F10N folder.</p> <p>Note</p> <p>According to the u-blox Integration Manual for the NEO-F10N, the current firmware does not support such as geofencing and low power mode so those examples contained in the library do not apply. Remember, the NEO-F10N only supports serial UART so the examples involving I<sup>2</sup>C and SPI do not apply either.</p>"},{"location":"enable_l5_band_and_override_health_status/","title":"Enabling L5 Band and Overriding Health Status","text":"<p>By default, the L5 band is disabled on the NEO-F10N. To take advantage of the L5 band, you will need to:</p> <ul> <li>enable the L5 band</li> <li>override the health status check</li> <li>save the settings into memory</li> <li>perform a software reset</li> </ul>"},{"location":"enable_l5_band_and_override_health_status/#configuring-with-the-arduino-library","title":"Configuring with the Arduino Library","text":"<p>Arduino</p> <p>Make sure that you are using the SparkFun u-blox GNSS Arduino Library v3.1.1+ in order to be able to take advantage of the following functions.</p> <p>To do this using the Arduino Library, users can add   <code>myGNSS.setVal8(UBLOX_CFG_SIGNAL_GPS_L5_ENA, 1)</code>, <code>myGNSS.setGPSL5HealthOverride(true)</code>, and <code>myGNSS.softwareResetGNSSOnly()</code> in the <code>setup()</code> function after connecting an Arduino to the NEO-F10N's hardware UART. You will notice this at the end of the <code>setup()</code> function under the Example1_NAV_SIG.ino example.</p> <pre><code>  myGNSS.setUART1Output(COM_TYPE_UBX); //Set the UART1 port to output UBX only (turn off NMEA noise)\n  myGNSS.saveConfigSelective(VAL_CFG_SUBSEC_IOPORT); //Save (only) the communications port settings to flash and BBR\n\n  myGNSS.setMeasurementRate(5000); //Produce one solution every five seconds (NAV SIG produces a _lot_ of data!)\n\n  myGNSS.setVal8(UBLOX_CFG_SIGNAL_GPS_L5_ENA, 1); // Make sure the GPS L5 band is enabled (needed on the NEO-F9P)\n\n  myGNSS.setGPSL5HealthOverride(true); // Mark L5 signals as healthy - store in RAM and BBR\n\n  myGNSS.setLNAMode(SFE_UBLOX_LNA_MODE_NORMAL); // Set the LNA gain to normal (full). Other options: LOWGAIN, BYPASS\n\n  myGNSS.softwareResetGNSSOnly(); // Restart the GNSS to apply the L5 health override\n\n  myGNSS.setAutoNAVSIGcallbackPtr(&amp;newSIG); // Enable automatic NAV SIG messages with callback to newSIG\n</code></pre>"},{"location":"enable_l5_band_and_override_health_status/#configuring-with-u-center","title":"Configuring with U-Center","text":"<p>Users can also enable the L5 band via U-Center v22.07. Connect a USB cable between the NEO-F10N breakout board and your computer. Then open the software, connect to the COM port that the board enumerated to, and head to View &gt; Generation 9 Configuration View. Once open, select the check box for GPS's L5. Select the check box for BBR and Flash. When ready, hit the Send Configuration button.</p> <p>To override the health status by heading to View &gt; Messages View &gt; CUSTOM. With the Custom Messages set for Hex, paste the following to configure the settings in BBR and hit the send button:</p> <pre><code>B5 62 06 8A 09 00 01 02 00 00 01 00 32 10 01 E0 FE\n</code></pre> <p>Then send the following to configure the settings in FLASH and hit the send button:</p> <pre><code>B5 62 06 8A 09 00 01 04 00 00 01 00 32 10 01 E2 0E\n</code></pre> <p>Tip</p> <p>To confirm that the above UBX messages were sent successfully, check the <code>UBX-ACK-ACK</code> messages after sending the message. For users that want to revert to the default behavior, make sure to check the NEO-F10N Integration Manual under \"2.1.4 GPS L5 signal health status configuration\" section page 10 under Table 5: UBX binary strings to revert the GPS L5 signal health status monitoring to default.</p> <p>Ensure that the configuration is saved in BBR and Flash using the UBX-CFG-VALSET. Then send a UBX-CFG-RST message with resetMode 0x01 to apply the configuration stored in the BBR and flash layers.</p> <p>The \"Satellite Level History\" window should update and include the L5 bands if it is available.</p>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_hookup/","title":"Hardware Hookup","text":"<p>In this section, we'll go over how to connect the L1/L5 GNSS Antenna to the SparkFun GNSS L1/L5 Breakout - NEO-F10N. Depending on your application, you can connect the SparkFun GNSS L1/L5 Breakout - NEO-F10N directly to your computer.  For embedded application, you will want to connect the SparkFun GNSS L1/L5 Breakout - NEO-F10N to the IoT RedBoard - ESP32.</p>"},{"location":"hardware_hookup/#l1l5-dual-band-gnss-antenna","title":"L1/L5 Dual-Band GNSS Antenna","text":"<p>Connect a compatible dual-band antenna that is capable of receiving L1 and L5 bands. In this case, we used the \"GNSS L1/L5 Multi-Band High Precision Antenna - 5m (SMA).\" Insert the SMA side of the interface cable into the GNSS L1/L5 Breakout Board's SMA connector. Secure the connection by using the SMA's hex nut until it is finger-tight.</p> <p>You will need to include an antenna ground plate to get the most of the multi-band antenna. For the following images below, we'll have the magnetic mount antenna separate from the antenna ground plate when connecting the NEO-F10N breakout board to the rest of the system. When running the examples, make sure to have the antenna mounted over a metal ground plate.</p> <p>Note</p> <p>Not all multiband antennas are made the same! Make sure that you are connecting a multi-band antenna that is capable of receiving L1/L5 signals when using the SparkFun GNSS L1/L5 Breakout - NEO-F10N. There is also another u-blox antenna that looks the same. However, the u-blox antenna used in this tutorial receives L1/L5 signals as opposed to the L1/L2.</p>"},{"location":"hardware_hookup/#usb-to-neo-f10n","title":"USB to NEO-F10N","text":"<p>For users that simply want to connect to the board via USB, you will just need to insert a USB C cable into the USB connector. Then connect the other end to your computer's USB port.</p>"},{"location":"hardware_hookup/#connecting-via-uart-port","title":"Connecting via UART Port","text":"<p>Note</p> <p>We recommend using the IoT RedBoard - ESP32 for the scope of this tutorial.</p> <p>For users that are connecting to a microcontroller, you will need to adjust the jumpers and solder to the PTH before connecting to the SparkFun GNSS L1/L5 Breakout - NEO-F10N.</p>"},{"location":"hardware_hookup/#cutting-the-serial-jumpers","title":"Cutting the Serial Jumpers","text":"<p>For this example, we will connect the NEO-F10N to the IoT RedBoard - ESP32. Remember, the NEO-F10N has only one UART. You will need to cut the two jumpers on the back of the board labeled as USB-RX and USB-TX so that there is no bus contention.</p>"},{"location":"hardware_hookup/#connecting-via-pth","title":"Connecting via PTH","text":"<p>Once the jumpers have been cut, you will need to solder to the through hole pins. For temporary connections to the PTHs, you could use IC hooks to test out the pins. However, you'll need to solder headers or wires of your choice to the board for a secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul> <p>We decided to solder straight header pins to the 1x6 External Serial port. Your setup will look similar to the image below.</p> <p>You will then need to connect power and the UART pins between the boards. Below is an example of connecting the IoT RedBoard - ESP32's second hardware UART port. When initializing the serial, make sure to define your microcontroller's hardware serial, such as <code>Serial1</code> or <code>Serial2</code>. In this case, we needed to use UART2 for the IoT RedBoard - ESP32.</p> IoT RedBoard - ESP32              SparkFun GNSS L1/L5 Breakout - NEO-F10N              3.3V 3V3 UART2_TX (D17) RX UART2_RX (D16) TX GND GND <p>Note</p> <p>Note that some microcontrollers may not have enough memory and will not be compatible with the SparkFun u-blox GNSS Arduino Library v3 (i.e. ATmega328P on the RedBoard Plus and the Arduino Uno). There are also some microcontrollers that only have one hardware UART so you need to make sure that there are only two serial devices on the bus.</p>"},{"location":"hardware_hookup/#usb-to-microcontroller","title":"USB to Microcontroller","text":"<p>To power and program the IoT RedBoard - ESP32, users will just need to insert the Type C side of the cable to the development board. The other end will connect to a computer's USB port.</p>"},{"location":"hardware_hookup/#connecting-a-pair-of-bluesmirf-v2s","title":"Connecting a Pair of BlueSMiRF V2s","text":"<p>For users that want have a wireless connecting between the IoT RedBoard - ESP32 and the SparkFun GNSS L1/L5 Breakout Board - NEO-F10N, you could add a pair of BlueSMiRF V2s.</p> <p>If you have not already, check out the tutorial on the BlueSMiRFs if you decide to wireless transmit the data.</p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>In this section, we will highlight the hardware and pins that are broken out on the SparkFun GNSS L1/L5 Breakout - NEO-F10N, SMA. For more information, check out our Resources and Going Further for the NEO-F10N.</p> Top View Bottom View"},{"location":"hardware_overview/#neo-f10n-module","title":"NEO-F10N Module","text":"<p>The board breaks out the NEO-F10N with some application circuits.</p> u-blox NEO-F10N Module <p>Similar to the other u-blox engines, the NEO-F10N is a GNSS Receiver. The module supports the concurrent reception of three GNSS systems: GPS, Galileo, and BeiDou. The NEO-F10N utilizes the L1/L5 bands as opposed to other u-blox modules that use L1/L2, such as the NEO-M9N.</p> Image Courtesy of u-blox: GPS Signals Migration White Paper <p>Utilizing the L5 band, the NEO-F10N delivers improved performance under challenging urban environments because the L5 signals fall within the protected ARNS (aeronautical radio navigation service) frequency band. This band is less subject to RF interference. Below is a comparison of a single-band (L1) vs dual-band (L1/L5) GNSS test with a car driving through an urban environment. Tracking the vehicle was better when utilizing the L1/L5 bands.</p> Image Courtesy of u-blox: GPS Signals Migration White Paper <p>Note</p> <p>As of the writing of this tutorial, it is important to note that L5 band is still not yet fully operational on GPS and Galileo. It is expected to be fully operational by 2025.</p> <p>The module can achieve meter-level accuracy with a satellite lock. Below are a few specs taken from the datasheet. For more information, check out the related documents for the NEO-F10N in the Resources.</p> <ul> <li>Time to First Fix: 28s (cold), 2s (hot)</li> <li>Max Navigation Rate for Single GNSS Configuration (GPS): 20 Hz</li> <li>Positional Accuracy (GPS): 1.5m</li> <li>Time Pulse Accuracy: 30ns</li> <li>Operational Limits<ul> <li>Max G: \u2264 4G</li> <li>Max Altitude: 80km (49.7 miles)</li> <li>Max Velocity: 500m/s (1118mph)</li> </ul> </li> <li>Software Configurable<ul> <li>Baud Rate (38400 Baud, default)</li> <li>Odometer</li> <li>Spoof Detection</li> <li>External Interrupt</li> <li>Pin Control</li> <li>Many others!</li> </ul> </li> <li>Supports: NMEA, UBX over UART</li> </ul>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>There are a variety of power and power-related nets broken out on the USB connector and through hole pads. 5V power from the USB C Connector or PTH is regulated down to 3.3V with the AP2112K 3.3V/600mA voltage regulator. The logic levels for the NEO-F10N is 3.3V for the I/O pins.</p> <ul> <li>5V \u2014 Power from the USB C connector's VBUS provides power to the 5V bus. The 5V net is also connected to the edge PTH pin labeled as 5V and the input of the 3.3V voltage regulator. Built-in Schottky diodes are included on the VBUS and 5V nets for protection. Make sure that power you provide to this pin does not exceed 6 volts.</li> <li>3V3 \u2014 This connects to the 3.3V net. Both sides of the board includes a 3.3V pin (labeled as 3V3) that should only be provided with a clean 3.3V power signal.</li> <li>GND \u2014 Of course, is the common, ground voltage (0V reference) for the system.</li> </ul> Power from USB and PTHs"},{"location":"hardware_overview/#backup-battery","title":"Backup Battery","text":"<p>The small metal disk is a small lithium battery. This battery does not provide power to the IC like the 3.3V system does, but to relevant systems inside the IC that allow for a quick reconnection to satellites. The first time to fix (TTFF) is about ~28 seconds. With the backup battery, the hot start is less than 2 seconds.</p> Backup Battery Highlighted"},{"location":"hardware_overview/#ch340c-usb-to-serial-converter","title":"CH340C USB-to-Serial Converter","text":"<p>The board includes a built-in CH340 USB-to-serial converter to connect the board to a computer's USB port. This is useful for users viewing data, configuring the NEO-F10N, or updating firmware through u-center graphical user interface (GUI). Of course, users can also view the serial data through a serial terminal as well.</p> USB, TVS Diodes, and CH340 Highlighted"},{"location":"hardware_overview/#uart1","title":"UART1","text":"<p>There are two pins on each row of headers currently labeled as TX and RX for the UART. Compared to other u-blox modules, there is no USB, I<sup>2</sup>C, SPI, or secondary UART port. The NEO-F10N has only one serial UART port available. The default baud rate is set to 38400 baud, 8-bits, no parity, and 1 stop bit. The NEO-F10N is set to output the following messages by default: NMEA GGA, GLL, GSA, GSV, RMC, VTG and TXT.</p> <ul> <li>TX \u2014 TX out from the NEO-F10N</li> <li>RX \u2014 RX into the NEO-F10N</li> </ul> UART Pins Highlighted <p>These pins are currently tied to the CH340's UART pins. For users connecting the board's serial UART pins to a microcontroller or radio, you will need to cut the USB-TX and USB-RX jumpers to avoid bus contention.  </p> <p>The 1x6 header labeled as \"External Serial\" can be used to connect to any other serial device that has a standard serial UART header. For example, you can connect a BlueSMiRF v2 wirelessly stream serial data using SPP to a smartphone's Bluetooth\u00ae or a second BlueSMiRF.</p> External Serial Highlighted"},{"location":"hardware_overview/#sma-connector","title":"SMA Connector","text":"<p>The board is populated with one SMA connector for a secure connection. You will need a multiband GNSS antenna capable of receiving L1 and L5 bands to get the most out of the NEO-F10N. Note that this is intended for active antennas. We recommend using the GNSS L1/L5 Multi-Band High Precision Antenna - 5m (SMA). You will also need an antenna ground plate</p> SMA Connector Highlighted"},{"location":"hardware_overview/#broken-out-pins","title":"Broken Out Pins","text":"<p>There are four other pins broken out:</p> <ul> <li>SAFE \u2014 Safeboot input pin. This is required for firmware updates to the module and generally should not be used or connected.</li> <li>PPS \u2014 Pulse-per-second output pin. Begins blinking at 1Hz when module gets basic GPS/GNSS position lock.</li> <li>EVENT \u2014 Interrupt input/output pin. Can be configured using U-Center to bring the module out of deep sleep or to output an interrupt for various module states.</li> <li>RST/ RESET \u2014 Reset input pin. Pull this line low to reset the module.</li> </ul> Other Breakout Pins Highlighted"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>The board includes the following status LEDs as indicated in the image below.</p> <ul> <li>PWR \u2014 Indicates when the NEO-F10N is powered.</li> <li>PPS \u2014 Tied to the Pulse Per Second pin and acts as a visual indicator to the NEO-F10N's pulse per second signal.</li> </ul> LEDs Highlighted"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"<p>Note</p> <p>If this is your first time working with jumpers, check out the How to Work with Jumper Pads and PCB Traces tutorial for more information.</p> <p>If you flip the board over, you will notice a few jumper pads.</p> <ul> <li>SHLD \u2014 This jumper connects the USB Type C connector's shield pin to GND. By default, this is closed. Cut this to isolate the USB Type C connector's shield pin.</li> <li>USB-5V \u2014 This jumper connects the 5V net to the 5V VBUS net. By default, this is open. Add a solder blob to the jumper to connect 5V PTH to the USB's VBUS.</li> <li>MEAS \u2014 By default, the jumper is closed. You can cut this jumper and solder to the PTHs to measure the NEO-F10N's current draw from either the USB's VBUS or 5V net. Just make sure to close the jumper if you decide to still use power from the USB or the 5V pin.</li> <li>USB-TX \u2014 The USB-TX jumper connects the CH340 USB-to-Serial converter's RX pin to the  NEO-F10N's TX pin. As stated earlier, cut this trace when connecting another serial device on the PTH to avoid bus contention.</li> <li>USB-RX \u2014 The USB-RX jumper connects the CH340 USB-to-Serial converter's TX pin to the  NEO-F10N's RX pin. As stated earlier, cut this trace when connecting another serial device on the PTH to avoid bus contention.</li> <li>EXT-3V3 \u2014 This jumper connects 3.3V to the external serial port. By default, this is closed and will provide power to anything connected to the external serial port. To avoid conflicting voltages, cut this jumper if you are connecting 3.3V USB device with its own power source to the 1x6 header while the GNSS receiver is being powered with its own power source.</li> <li>PWR \u2014 The power LED will illuminate when 3.3V is activated either over USB or via the 3v3 pin. Cut this jumper to disable the LED.</li> <li>PPS \u2014 The pulse per second LED will illuminate each second once a position lock has been achieved. Cut this jumper to disable the LED.</li> </ul> MEAS PTH Highlighted - Top View Jumpers Highlighted Highlighted - Bottom View"},{"location":"hardware_overview/#3d-model","title":"3D Model","text":"<p>3D models of the board and components were exported to STEP and STL files using KiCad.</p> <p></p> Click Here for the STEP File"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The board is 50.8mm x 38.1mm (2.0\" x 1.5). This is not including the SMA connector. There are 4x mounting holes by each corner of the board for 4-40 screws and standoffs.</p> Board Dimensions"},{"location":"introduction/","title":"Introduction","text":"<p>The SparkFun GNSS L1/L5 Breakout - NEO-F10N, SMA is a standard precision GNSS board with meter-level positional accuracy. The NEO-F10N uses the L1/L5 bands instead of the more commonly seen L1/L2 bands. Utilizing the L5 band, the NEO-F10N delivers improved performance under challenging urban environments the L5 signals fall within the protected ARNS (aeronautical radio navigation service) frequency band. This band is less subject to RF interference.</p> <p> <ul> <li> <p> </p> <p> SparkFun GNSS L1/L5 Breakout - NEO-F10N, SMA    GPS-24114    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>This breakout supports concurrent reception of three GNSS constellations: GPS, Galileo, and BeiDou. The proprietary dual-band multipath mitigation technology from the u-blox F10 allows the module to choose the best signals from both bands to achieve a significantly better position accuracy in challenging urban environments than with the L1 band alone.</p> <p>What's different from other u-blox modules is that the NEO-F10N module only supports one serial UART communication port. U-blox based GPS products are configurable using the popular, but dense, windows program called u-center. Plenty of different functions can be configured on the NEO-F10N: baud rates, update rates, spoofing detection, external interrupts, SBAS, etc. We've included a few basic UART examples with our SparkFun Arduino Library to get started.</p> <p>In this tutorial, we'll go over the hardware and how to hookup the breakout board. We will also go over a few basic Arduino examples to get started!</p>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials at a minimum. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun GNSS L1/L5 Breakout - NEO-F10N, SMA [GPS-24114]</li> <li>1x Reversible USB A to C Cable - 0.8m [CAB-15425]</li> <li>1x Reinforced Interface Cable - SMA Male to TNC Male (10m) [CAB-21740]</li> <li>1x GNSS L1/L5 Multi-Band High Precision Antenna - 5m (SMA) [GPS-23814]</li> <li>1x SparkFun IoT RedBoard - ESP32 Development Board [WRL-19177]</li> </ul> <ul> <li> <p> </p> <p> SparkFun GNSS L1/L5 Breakout - NEO-F10N, SMA    GPS-24114 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15425 </p> </li> </ul> <ul> <li> <p> </p> <p> GPS Antenna Ground Plate    GPS-17519 </p> </li> </ul> <ul> <li> <p> </p> <p> GNSS L1/L5 Multi-Band High Precision Antenna - 5m (SMA)    GPS-23814 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board    WRL-19177 </p> </li> </ul>"},{"location":"introduction/#gnss-accessories","title":"GNSS Accessories","text":"<p>Depending on your setup, you may need the following mounting hardware. As included earlier in the required materials, the antenna ground plate below is needed when using multi-band antennas that do not have a good ground plane.</p> <ul> <li> <p> </p> <p> GNSS L1/L5 Multi-Band High Precision Antenna - 5m (SMA)    GPS-23814 </p> </li> </ul> <ul> <li> <p> </p> <p> GPS Antenna Ground Plate    GPS-17519 </p> </li> </ul> <p>For users that decide to use the SPK6618H multi-band antenna as an alternative, users would not need to include the antenna ground plate. The mounting hardware listed below is also typically used with the SPK6618H multi-band antennas. The reinforced interface cable between the SMA to TNC also needed for the SPK6618H multi-band antennas.</p> <ul> <li> <p> </p> <p> GNSS Multi-Band L1/L2/L5 Surveying Antenna - TNC (SPK6618H)    GPS-21801 </p> </li> </ul> <ul> <li> <p> </p> <p> GNSS Magnetic Antenna Mount - 5/8\" 11-TPI    TOL-21257 </p> </li> </ul> <ul> <li> <p> </p> <p> GNSS Antenna Mounting Hardware Kit    KIT-22197 </p> </li> </ul> <ul> <li> <p> </p> <p> Reinforced Interface Cable - SMA Male to TNC Male (10m)    CAB-21740 </p> </li> </ul>"},{"location":"introduction/#radios-optional","title":"Radios \u00a0(Optional)","text":"<p>For users that require radios to send data wirelessly, you could use the following radios.</p> <ul> <li> <p> </p> <p> SparkFun BlueSMiRF v2 - Headers    WRL-23287 </p> </li> </ul> <ul> <li> <p> </p> <p> SiK Telemetry Radio V3 - 915MHz, 100mW    WRL-19032 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun LoRaSerial Kit - 915MHz (Enclosed)    WRL-20029 </p> </li> </ul>"},{"location":"introduction/#tools-optional","title":"Tools \u00a0(Optional)","text":"<p>You will need a soldering iron, solder, and general soldering accessories for a secure connection when using the plated through holes. You will also need a hobby knife to disable the UART connection between the CH340 and the NEO-F10N.</p> <ul> <li> <p> </p> <p> PINECIL Soldering Iron Kit    TOL-24063 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Strippers - 20-30 AWG    TOL-24771 </p> </li> </ul> <ul> <li> <p> </p> <p> Flush Cutters - Xcelite    TOL-14782 </p> </li> </ul> <ul> <li> <p> </p> <p> Hobby Knife    TOL-09200 </p> </li> </ul>"},{"location":"introduction/#prototyping-accessories-optional","title":"Prototyping Accessories \u00a0(Optional)","text":"<p>For those using radios to connect a base station and rover together, you will need to connect to the PTHs. You could use IC hooks for a temporary connection depending on your setup and what you have available. Of course, you will want to the solder header pins for a secure connection. Below are a few prototyping accessories that you may want to consider.</p> <ul> <li> <p> </p> <p> Breadboard - Self-Adhesive (White)    PRT-12002 </p> </li> </ul> <ul> <li> <p> </p> <p> IC Hook with Pigtail    CAB-09741 </p> </li> </ul> <ul> <li> <p> </p> <p> Break Away Headers - Straight    PRT-00116 </p> </li> </ul> <ul> <li> <p> </p> <p> Female Headers    PRT-00115 </p> </li> </ul> <ul> <li> <p> </p> <p> Header - 6-pin Female (PTH, 0.1\")    PRT-11894 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/M Pack of 10    PRT-08431 </p> </li> </ul>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> GPS Basics </p> </li> </ul> <ul> <li> <p> </p> <p> How to Install CH340 Drivers </p> </li> </ul> <ul> <li> <p> </p> <p> Getting Started with U-Center for u-blox </p> </li> </ul> <ul> <li> <p> </p> <p> How to Upgrade Firmware of a u-blox GNSS Receiver </p> </li> </ul> <ul> <li> <p> </p> <p> Serial Communication </p> </li> </ul> <ul> <li> <p> </p> <p> How to Work with Jumper Pads and PCB Traces </p> </li> </ul> <ul> <li> <p> </p> <p> How to Solder: Through-Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Board Definitions in the Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> IoT RedBoard ESP32 Development Board Hookup Guide </p> </li> </ul> <p>You may also be interested in the following blog posts on GNSS technologies.</p> <ul> <li> <p> <p>GPS vs GNSS</p>"},{"location":"resources/","title":"Resources","text":"<p>Now that you've successfully got your SparkFun GNSS-RTK L1/L5 Breakout - NEO-F10N, SMA up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <p>SparkFun Resources</p> <ul> <li>Schematic (PDF)</li> <li>KiCad Files (ZIP)</li> <li>3D Model (STEP)</li> <li>Board Dimensions (PNG)</li> <li>Building a GPS System</li> <li>Arduino Library</li> <li>GitHub Hardware Repo</li> </ul> <p>u-blox NEO-F10N Resources</p> <ul> <li>Product Summary (PDF)</li> <li>Datasheet (PDF)</li> <li>Integration Manual (PDF)</li> <li>Interface Description (PDF)</li> <li>White Paper: Modern GNSS/GPS signals: Moving from Single-Band to Dual-Band (PDF)</li> <li>u-blox ECCN (PDF)</li> </ul>"},{"location":"single_page/","title":"Introduction","text":"<p>The SparkFun GNSS L1/L5 Breakout - NEO-F10N, SMA is a standard precision GNSS board with meter-level positional accuracy. The NEO-F10N uses the L1/L5 bands instead of the more commonly seen L1/L2 bands. Utilizing the L5 band, the NEO-F10N delivers improved performance under challenging urban environments the L5 signals fall within the protected ARNS (aeronautical radio navigation service) frequency band. This band is less subject to RF interference.</p> <p> <ul> <li> <p> </p> <p> SparkFun GNSS L1/L5 Breakout - NEO-F10N, SMA    GPS-24114    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>This breakout supports concurrent reception of three GNSS constellations: GPS, Galileo, and BeiDou. The proprietary dual-band multipath mitigation technology from the u-blox F10 allows the module to choose the best signals from both bands to achieve a significantly better position accuracy in challenging urban environments than with the L1 band alone.</p> <p>What's different from other u-blox modules is that the NEO-F10N module only supports one serial UART communication port. U-blox based GPS products are configurable using the popular, but dense, windows program called u-center. Plenty of different functions can be configured on the NEO-F10N: baud rates, update rates, spoofing detection, external interrupts, SBAS, etc. We've included a few basic UART examples with our SparkFun Arduino Library to get started.</p> <p>In this tutorial, we'll go over the hardware and how to hookup the breakout board. We will also go over a few basic Arduino examples to get started!</p>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials at a minimum. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun GNSS L1/L5 Breakout - NEO-F10N, SMA [GPS-24114]</li> <li>1x Reversible USB A to C Cable - 0.8m [CAB-15425]</li> <li>1x Reinforced Interface Cable - SMA Male to TNC Male (10m) [CAB-21740]</li> <li>1x GNSS L1/L5 Multi-Band High Precision Antenna - 5m (SMA) [GPS-23814]</li> <li>1x SparkFun IoT RedBoard - ESP32 Development Board [WRL-19177]</li> </ul> <ul> <li> <p> </p> <p> SparkFun GNSS L1/L5 Breakout - NEO-F10N, SMA    GPS-24114 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 0.8m    CAB-15425 </p> </li> </ul> <ul> <li> <p> </p> <p> GPS Antenna Ground Plate    GPS-17519 </p> </li> </ul> <ul> <li> <p> </p> <p> GNSS L1/L5 Multi-Band High Precision Antenna - 5m (SMA)    GPS-23814 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board    WRL-19177 </p> </li> </ul>"},{"location":"single_page/#gnss-accessories","title":"GNSS Accessories","text":"<p>Depending on your setup, you may need the following mounting hardware. As included earlier in the required materials, the antenna ground plate below is needed when using multi-band antennas that do not have a good ground plane.</p> <ul> <li> <p> </p> <p> GNSS L1/L5 Multi-Band High Precision Antenna - 5m (SMA)    GPS-23814 </p> </li> </ul> <ul> <li> <p> </p> <p> GPS Antenna Ground Plate    GPS-17519 </p> </li> </ul> <p>For users that decide to use the SPK6618H multi-band antenna as an alternative, users would not need to include the antenna ground plate. The mounting hardware listed below is also typically used with the SPK6618H multi-band antennas. The reinforced interface cable between the SMA to TNC also needed for the SPK6618H multi-band antennas.</p> <ul> <li> <p> </p> <p> GNSS Multi-Band L1/L2/L5 Surveying Antenna - TNC (SPK6618H)    GPS-21801 </p> </li> </ul> <ul> <li> <p> </p> <p> GNSS Magnetic Antenna Mount - 5/8\" 11-TPI    TOL-21257 </p> </li> </ul> <ul> <li> <p> </p> <p> GNSS Antenna Mounting Hardware Kit    KIT-22197 </p> </li> </ul> <ul> <li> <p> </p> <p> Reinforced Interface Cable - SMA Male to TNC Male (10m)    CAB-21740 </p> </li> </ul>"},{"location":"single_page/#radios-optional","title":"Radios \u00a0(Optional)","text":"<p>For users that require radios to send data wirelessly, you could use the following radios.</p> <ul> <li> <p> </p> <p> SparkFun BlueSMiRF v2 - Headers    WRL-23287 </p> </li> </ul> <ul> <li> <p> </p> <p> SiK Telemetry Radio V3 - 915MHz, 100mW    WRL-19032 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun LoRaSerial Kit - 915MHz (Enclosed)    WRL-20029 </p> </li> </ul>"},{"location":"single_page/#tools-optional","title":"Tools \u00a0(Optional)","text":"<p>You will need a soldering iron, solder, and general soldering accessories for a secure connection when using the plated through holes. You will also need a hobby knife to disable the UART connection between the CH340 and the NEO-F10N.</p> <ul> <li> <p> </p> <p> PINECIL Soldering Iron Kit    TOL-24063 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Strippers - 20-30 AWG    TOL-24771 </p> </li> </ul> <ul> <li> <p> </p> <p> Flush Cutters - Xcelite    TOL-14782 </p> </li> </ul> <ul> <li> <p> </p> <p> Hobby Knife    TOL-09200 </p> </li> </ul>"},{"location":"single_page/#prototyping-accessories-optional","title":"Prototyping Accessories \u00a0(Optional)","text":"<p>For those using radios to connect a base station and rover together, you will need to connect to the PTHs. You could use IC hooks for a temporary connection depending on your setup and what you have available. Of course, you will want to the solder header pins for a secure connection. Below are a few prototyping accessories that you may want to consider.</p> <ul> <li> <p> </p> <p> Breadboard - Self-Adhesive (White)    PRT-12002 </p> </li> </ul> <ul> <li> <p> </p> <p> IC Hook with Pigtail    CAB-09741 </p> </li> </ul> <ul> <li> <p> </p> <p> Break Away Headers - Straight    PRT-00116 </p> </li> </ul> <ul> <li> <p> </p> <p> Female Headers    PRT-00115 </p> </li> </ul> <ul> <li> <p> </p> <p> Header - 6-pin Female (PTH, 0.1\")    PRT-11894 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/M Pack of 10    PRT-08431 </p> </li> </ul>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> GPS Basics </p> </li> </ul> <ul> <li> <p> </p> <p> How to Install CH340 Drivers </p> </li> </ul> <ul> <li> <p> </p> <p> Getting Started with U-Center for u-blox </p> </li> </ul> <ul> <li> <p> </p> <p> How to Upgrade Firmware of a u-blox GNSS Receiver </p> </li> </ul> <ul> <li> <p> </p> <p> Serial Communication </p> </li> </ul> <ul> <li> <p> </p> <p> How to Work with Jumper Pads and PCB Traces </p> </li> </ul> <ul> <li> <p> </p> <p> How to Solder: Through-Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Board Definitions in the Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> IoT RedBoard ESP32 Development Board Hookup Guide </p> </li> </ul> <p>You may also be interested in the following blog posts on GNSS technologies.</p> <ul> <li> <p> <p>GPS vs GNSS</p>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>In this section, we will highlight the hardware and pins that are broken out on the SparkFun GNSS L1/L5 Breakout - NEO-F10N, SMA. For more information, check out our Resources and Going Further for the NEO-F10N.</p> Top View Bottom View"},{"location":"single_page/#neo-f10n-module","title":"NEO-F10N Module","text":"<p>The board breaks out the NEO-F10N with some application circuits.</p> u-blox NEO-F10N Module <p>Similar to the other u-blox engines, the NEO-F10N is a GNSS Receiver. The module supports the concurrent reception of three GNSS systems: GPS, Galileo, and BeiDou. The NEO-F10N utilizes the L1/L5 bands as opposed to other u-blox modules that use L1/L2, such as the NEO-M9N.</p> Image Courtesy of u-blox: GPS Signals Migration White Paper <p>Utilizing the L5 band, the NEO-F10N delivers improved performance under challenging urban environments because the L5 signals fall within the protected ARNS (aeronautical radio navigation service) frequency band. This band is less subject to RF interference. Below is a comparison of a single-band (L1) vs dual-band (L1/L5) GNSS test with a car driving through an urban environment. Tracking the vehicle was better when utilizing the L1/L5 bands.</p> Image Courtesy of u-blox: GPS Signals Migration White Paper <p>Note</p> <p>As of the writing of this tutorial, it is important to note that L5 band is still not yet fully operational on GPS and Galileo. It is expected to be fully operational by 2025.</p> <p>The module can achieve meter-level accuracy with a satellite lock. Below are a few specs taken from the datasheet. For more information, check out the related documents for the NEO-F10N in the Resources.</p> <ul> <li>Time to First Fix: 28s (cold), 2s (hot)</li> <li>Max Navigation Rate for Single GNSS Configuration (GPS): 20 Hz</li> <li>Positional Accuracy (GPS): 1.5m</li> <li>Time Pulse Accuracy: 30ns</li> <li>Operational Limits<ul> <li>Max G: \u2264 4G</li> <li>Max Altitude: 80km (49.7 miles)</li> <li>Max Velocity: 500m/s (1118mph)</li> </ul> </li> <li>Software Configurable<ul> <li>Baud Rate (38400 Baud, default)</li> <li>Odometer</li> <li>Spoof Detection</li> <li>External Interrupt</li> <li>Pin Control</li> <li>Many others!</li> </ul> </li> <li>Supports: NMEA, UBX over UART</li> </ul>"},{"location":"single_page/#power","title":"Power","text":"<p>There are a variety of power and power-related nets broken out on the USB connector and through hole pads. 5V power from the USB C Connector or PTH is regulated down to 3.3V with the AP2112K 3.3V/600mA voltage regulator. The logic levels for the NEO-F10N is 3.3V for the I/O pins.</p> <ul> <li>5V \u2014 Power from the USB C connector's VBUS provides power to the 5V bus. The 5V net is also connected to the edge PTH pin labeled as 5V and the input of the 3.3V voltage regulator. Built-in Schottky diodes are included on the VBUS and 5V nets for protection. Make sure that power you provide to this pin does not exceed 6 volts.</li> <li>3V3 \u2014 This connects to the 3.3V net. Both sides of the board includes a 3.3V pin (labeled as 3V3) that should only be provided with a clean 3.3V power signal.</li> <li>GND \u2014 Of course, is the common, ground voltage (0V reference) for the system.</li> </ul> Power from USB and PTHs"},{"location":"single_page/#backup-battery","title":"Backup Battery","text":"<p>The small metal disk is a small lithium battery. This battery does not provide power to the IC like the 3.3V system does, but to relevant systems inside the IC that allow for a quick reconnection to satellites. The first time to fix (TTFF) is about ~28 seconds. With the backup battery, the hot start is less than 2 seconds.</p> Backup Battery Highlighted"},{"location":"single_page/#ch340c-usb-to-serial-converter","title":"CH340C USB-to-Serial Converter","text":"<p>The board includes a built-in CH340 USB-to-serial converter to connect the board to a computer's USB port. This is useful for users viewing data, configuring the NEO-F10N, or updating firmware through u-center graphical user interface (GUI). Of course, users can also view the serial data through a serial terminal as well.</p> USB, TVS Diodes, and CH340 Highlighted"},{"location":"single_page/#uart1","title":"UART1","text":"<p>There are two pins on each row of headers currently labeled as TX and RX for the UART. Compared to other u-blox modules, there is no USB, I<sup>2</sup>C, SPI, or secondary UART port. The NEO-F10N has only one serial UART port available. The default baud rate is set to 38400 baud, 8-bits, no parity, and 1 stop bit. The NEO-F10N is set to output the following messages by default: NMEA GGA, GLL, GSA, GSV, RMC, VTG and TXT.</p> <ul> <li>TX \u2014 TX out from the NEO-F10N</li> <li>RX \u2014 RX into the NEO-F10N</li> </ul> UART Pins Highlighted <p>These pins are currently tied to the CH340's UART pins. For users connecting the board's serial UART pins to a microcontroller or radio, you will need to cut the USB-TX and USB-RX jumpers to avoid bus contention.  </p> <p>The 1x6 header labeled as \"External Serial\" can be used to connect to any other serial device that has a standard serial UART header. For example, you can connect a BlueSMiRF v2 wirelessly stream serial data using SPP to a smartphone's Bluetooth\u00ae or a second BlueSMiRF.</p> External Serial Highlighted"},{"location":"single_page/#sma-connector","title":"SMA Connector","text":"<p>The board is populated with one SMA connector for a secure connection. You will need a multiband GNSS antenna capable of receiving L1 and L5 bands to get the most out of the NEO-F10N. Note that this is intended for active antennas. We recommend using the GNSS L1/L5 Multi-Band High Precision Antenna - 5m (SMA). You will also need an antenna ground plate</p> SMA Connector Highlighted"},{"location":"single_page/#broken-out-pins","title":"Broken Out Pins","text":"<p>There are four other pins broken out:</p> <ul> <li>SAFE \u2014 Safeboot input pin. This is required for firmware updates to the module and generally should not be used or connected.</li> <li>PPS \u2014 Pulse-per-second output pin. Begins blinking at 1Hz when module gets basic GPS/GNSS position lock.</li> <li>EVENT \u2014 Interrupt input/output pin. Can be configured using U-Center to bring the module out of deep sleep or to output an interrupt for various module states.</li> <li>RST/ RESET \u2014 Reset input pin. Pull this line low to reset the module.</li> </ul> Other Breakout Pins Highlighted"},{"location":"single_page/#leds","title":"LEDs","text":"<p>The board includes the following status LEDs as indicated in the image below.</p> <ul> <li>PWR \u2014 Indicates when the NEO-F10N is powered.</li> <li>PPS \u2014 Tied to the Pulse Per Second pin and acts as a visual indicator to the NEO-F10N's pulse per second signal.</li> </ul> LEDs Highlighted"},{"location":"single_page/#jumpers","title":"Jumpers","text":"<p>Note</p> <p>If this is your first time working with jumpers, check out the How to Work with Jumper Pads and PCB Traces tutorial for more information.</p> <p>If you flip the board over, you will notice a few jumper pads.</p> <ul> <li>SHLD \u2014 This jumper connects the USB Type C connector's shield pin to GND. By default, this is closed. Cut this to isolate the USB Type C connector's shield pin.</li> <li>USB-5V \u2014 This jumper connects the 5V net to the 5V VBUS net. By default, this is open. Add a solder blob to the jumper to connect 5V PTH to the USB's VBUS.</li> <li>MEAS \u2014 By default, the jumper is closed. You can cut this jumper and solder to the PTHs to measure the NEO-F10N's current draw from either the USB's VBUS or 5V net. Just make sure to close the jumper if you decide to still use power from the USB or the 5V pin.</li> <li>USB-TX \u2014 The USB-TX jumper connects the CH340 USB-to-Serial converter's RX pin to the  NEO-F10N's TX pin. As stated earlier, cut this trace when connecting another serial device on the PTH to avoid bus contention.</li> <li>USB-RX \u2014 The USB-RX jumper connects the CH340 USB-to-Serial converter's TX pin to the  NEO-F10N's RX pin. As stated earlier, cut this trace when connecting another serial device on the PTH to avoid bus contention.</li> <li>EXT-3V3 \u2014 This jumper connects 3.3V to the external serial port. By default, this is closed and will provide power to anything connected to the external serial port. To avoid conflicting voltages, cut this jumper if you are connecting 3.3V USB device with its own power source to the 1x6 header while the GNSS receiver is being powered with its own power source.</li> <li>PWR \u2014 The power LED will illuminate when 3.3V is activated either over USB or via the 3v3 pin. Cut this jumper to disable the LED.</li> <li>PPS \u2014 The pulse per second LED will illuminate each second once a position lock has been achieved. Cut this jumper to disable the LED.</li> </ul> MEAS PTH Highlighted - Top View Jumpers Highlighted Highlighted - Bottom View"},{"location":"single_page/#3d-model","title":"3D Model","text":"<p>3D models of the board and components were exported to STEP and STL files using KiCad.</p> <p></p> Click Here for the STEP File"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The board is 50.8mm x 38.1mm (2.0\" x 1.5). This is not including the SMA connector. There are 4x mounting holes by each corner of the board for 4-40 screws and standoffs.</p> Board Dimensions"},{"location":"single_page/#hardware-hookup","title":"Hardware Hookup","text":"<p>In this section, we'll go over how to connect the L1/L5 GNSS Antenna to the SparkFun GNSS L1/L5 Breakout - NEO-F10N. Depending on your application, you can connect the SparkFun GNSS L1/L5 Breakout - NEO-F10N directly to your computer.  For embedded application, you will want to connect the SparkFun GNSS L1/L5 Breakout - NEO-F10N to the IoT RedBoard - ESP32.</p>"},{"location":"single_page/#l1l5-dual-band-gnss-antenna","title":"L1/L5 Dual-Band GNSS Antenna","text":"<p>Connect a compatible dual-band antenna that is capable of receiving L1 and L5 bands. In this case, we used the \"GNSS L1/L5 Multi-Band High Precision Antenna - 5m (SMA).\" Insert the SMA side of the interface cable into the GNSS L1/L5 Breakout Board's SMA connector. Secure the connection by using the SMA's hex nut until it is finger-tight.</p> <p>You will need to include an antenna ground plate to get the most of the multi-band antenna. For the following images below, we'll have the magnetic mount antenna separate from the antenna ground plate when connecting the NEO-F10N breakout board to the rest of the system. When running the examples, make sure to have the antenna mounted over a metal ground plate.</p> <p>Note</p> <p>Not all multiband antennas are made the same! Make sure that you are connecting a multi-band antenna that is capable of receiving L1/L5 signals when using the SparkFun GNSS L1/L5 Breakout - NEO-F10N. There is also another u-blox antenna that looks the same. However, the u-blox antenna used in this tutorial receives L1/L5 signals as opposed to the L1/L2.</p>"},{"location":"single_page/#usb-to-neo-f10n","title":"USB to NEO-F10N","text":"<p>For users that simply want to connect to the board via USB, you will just need to insert a USB C cable into the USB connector. Then connect the other end to your computer's USB port.</p>"},{"location":"single_page/#connecting-via-uart-port","title":"Connecting via UART Port","text":"<p>Note</p> <p>We recommend using the IoT RedBoard - ESP32 for the scope of this tutorial.</p> <p>For users that are connecting to a microcontroller, you will need to adjust the jumpers and solder to the PTH before connecting to the SparkFun GNSS L1/L5 Breakout - NEO-F10N.</p>"},{"location":"single_page/#cutting-the-serial-jumpers","title":"Cutting the Serial Jumpers","text":"<p>For this example, we will connect the NEO-F10N to the IoT RedBoard - ESP32. Remember, the NEO-F10N has only one UART. You will need to cut the two jumpers on the back of the board labeled as USB-RX and USB-TX so that there is no bus contention.</p>"},{"location":"single_page/#connecting-via-pth","title":"Connecting via PTH","text":"<p>Once the jumpers have been cut, you will need to solder to the through hole pins. For temporary connections to the PTHs, you could use IC hooks to test out the pins. However, you'll need to solder headers or wires of your choice to the board for a secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul> <p>We decided to solder straight header pins to the 1x6 External Serial port. Your setup will look similar to the image below.</p> <p>You will then need to connect power and the UART pins between the boards. Below is an example of connecting the IoT RedBoard - ESP32's second hardware UART port. When initializing the serial, make sure to define your microcontroller's hardware serial, such as <code>Serial1</code> or <code>Serial2</code>. In this case, we needed to use UART2 for the IoT RedBoard - ESP32.</p> IoT RedBoard - ESP32              SparkFun GNSS L1/L5 Breakout - NEO-F10N              3.3V 3V3 UART2_TX (D17) RX UART2_RX (D16) TX GND GND <p>Note</p> <p>Note that some microcontrollers may not have enough memory and will not be compatible with the SparkFun u-blox GNSS Arduino Library v3 (i.e. ATmega328P on the RedBoard Plus and the Arduino Uno). There are also some microcontrollers that only have one hardware UART so you need to make sure that there are only two serial devices on the bus.</p>"},{"location":"single_page/#usb-to-microcontroller","title":"USB to Microcontroller","text":"<p>To power and program the IoT RedBoard - ESP32, users will just need to insert the Type C side of the cable to the development board. The other end will connect to a computer's USB port.</p>"},{"location":"single_page/#connecting-a-pair-of-bluesmirf-v2s","title":"Connecting a Pair of BlueSMiRF V2s","text":"<p>For users that want have a wireless connecting between the IoT RedBoard - ESP32 and the SparkFun GNSS L1/L5 Breakout Board - NEO-F10N, you could add a pair of BlueSMiRF V2s.</p> <p>If you have not already, check out the tutorial on the BlueSMiRFs if you decide to wireless transmit the data.</p>"},{"location":"single_page/#installing-the-arduino-library","title":"Installing the Arduino Library","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using the Arduino IDE, library, or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing Board Definitions in the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul> <p>Note</p> <p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p> <ul> <li>How to Install CH340 Drivers</li> </ul> <p>SparkFun has written a library to work with the u-blox NEO-F10N. You can obtain this library through the Arduino Library Manager by searching for \"SparkFun u-blox GNSS v3\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun u-blox GNSS Arduino Library - v3 (ZIP) <p>Once you have the library installed checkout the various examples! There are several examples in the library that cover more than just the NEO-F10N. Note that some examples will not apply depending on the modules features. We will be looking at the NEO-F10N folder.</p> <p>Note</p> <p>According to the u-blox Integration Manual for the NEO-F10N, the current firmware does not support such as geofencing and low power mode so those examples contained in the library do not apply. Remember, the NEO-F10N only supports serial UART so the examples involving I<sup>2</sup>C and SPI do not apply either.</p>"},{"location":"single_page/#enabling-l5-band-and-overriding-health-status","title":"Enabling L5 Band and Overriding Health Status","text":"<p>By default, the L5 band is disabled on the NEO-F10N. To take advantage of the L5 band, you will need to:</p> <ul> <li>enable the L5 band</li> <li>override the health status check</li> <li>save the settings into memory</li> <li>perform a software reset</li> </ul>"},{"location":"single_page/#configuring-with-the-arduino-library","title":"Configuring with the Arduino Library","text":"<p>Arduino</p> <p>Make sure that you are using the SparkFun u-blox GNSS Arduino Library v3.1.1+ in order to be able to take advantage of the following functions.</p> <p>To do this using the Arduino Library, users can add   <code>myGNSS.setVal8(UBLOX_CFG_SIGNAL_GPS_L5_ENA, 1)</code>, <code>myGNSS.setGPSL5HealthOverride(true)</code>, and <code>myGNSS.softwareResetGNSSOnly()</code> in the <code>setup()</code> function after connecting an Arduino to the NEO-F10N's hardware UART. You will notice this at the end of the <code>setup()</code> function under the Example1_NAV_SIG.ino example.</p> <pre><code>  myGNSS.setUART1Output(COM_TYPE_UBX); //Set the UART1 port to output UBX only (turn off NMEA noise)\n  myGNSS.saveConfigSelective(VAL_CFG_SUBSEC_IOPORT); //Save (only) the communications port settings to flash and BBR\n\n  myGNSS.setMeasurementRate(5000); //Produce one solution every five seconds (NAV SIG produces a _lot_ of data!)\n\n  myGNSS.setVal8(UBLOX_CFG_SIGNAL_GPS_L5_ENA, 1); // Make sure the GPS L5 band is enabled (needed on the NEO-F9P)\n\n  myGNSS.setGPSL5HealthOverride(true); // Mark L5 signals as healthy - store in RAM and BBR\n\n  myGNSS.setLNAMode(SFE_UBLOX_LNA_MODE_NORMAL); // Set the LNA gain to normal (full). Other options: LOWGAIN, BYPASS\n\n  myGNSS.softwareResetGNSSOnly(); // Restart the GNSS to apply the L5 health override\n\n  myGNSS.setAutoNAVSIGcallbackPtr(&amp;newSIG); // Enable automatic NAV SIG messages with callback to newSIG\n</code></pre>"},{"location":"single_page/#configuring-with-u-center","title":"Configuring with U-Center","text":"<p>Users can also enable the L5 band via U-Center v22.07. Connect a USB cable between the NEO-F10N breakout board and your computer. Then open the software, connect to the COM port that the board enumerated to, and head to View &gt; Generation 9 Configuration View. Once open, select the check box for GPS's L5. Select the check box for BBR and Flash. When ready, hit the Send Configuration button.</p> <p>To override the health status by heading to View &gt; Messages View &gt; CUSTOM. With the Custom Messages set for Hex, paste the following to configure the settings in BBR and hit the send button:</p> <pre><code>B5 62 06 8A 09 00 01 02 00 00 01 00 32 10 01 E0 FE\n</code></pre> <p>Then send the following to configure the settings in FLASH and hit the send button:</p> <pre><code>B5 62 06 8A 09 00 01 04 00 00 01 00 32 10 01 E2 0E\n</code></pre> <p>Tip</p> <p>To confirm that the above UBX messages were sent successfully, check the <code>UBX-ACK-ACK</code> messages after sending the message. For users that want to revert to the default behavior, make sure to check the NEO-F10N Integration Manual under \"2.1.4 GPS L5 signal health status configuration\" section page 10 under Table 5: UBX binary strings to revert the GPS L5 signal health status monitoring to default.</p> <p>Ensure that the configuration is saved in BBR and Flash using the UBX-CFG-VALSET. Then send a UBX-CFG-RST message with resetMode 0x01 to apply the configuration stored in the BBR and flash layers.</p> <p>The \"Satellite Level History\" window should update and include the L5 bands if it is available.</p>"},{"location":"single_page/#arduino-examples","title":"Arduino Examples","text":"<p>Now that we have our library and board add-on installed, we can start experimenting with the breakout board. For the scope of this tutorial, we will highlight one of the examples to get started. From there we will be able to build our own custom code to integrate the development board into a project.</p>"},{"location":"single_page/#example-1-nav-sig","title":"Example 1: NAV-SIG","text":"<p>This example shows how to configure the NEO-F10N GNSS for L5 band and overriding the health status. The output will indicate the type of signals that the NEO-F10N is receiving. Head to the example in the NEO-10N folder (located in File Examples &gt; SparkFun u-blox GNSS V3 &gt; NEO-F10N &gt; Example1_NAV-SIG).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board and set the Arduino Serial Monitor to 115200 baud. Give the NEO-F10N a few minutes to get a satellite lock. The signals available will be output in the Serial Monitor. If everything goes well, you should see some L5 signals (highlighted in red).</p>"},{"location":"single_page/#example-12-use-uart","title":"Example 12: Use UART","text":"<p>Note</p> <p>Make sure that you have the latest version of the SparkFun u-blox GNSS v3 Arduino Library when using the \"Use UART\" example. You will need a microcontroller (e.g. ESP32) with enough memory to compile this example.  Depending on the microcontroller that you use, you may also need to adjust the defined serial port from <code>Serial2</code> to <code>Serial1</code>.</p> <p>This example shows how to output your coordinates and satellites in view through the Serial UART. Head to the example in the NEO-10N folder (located in File Examples &gt; SparkFun u-blox GNSS V3 &gt; Basics &gt; Example12_UseUart).</p> <p>If you have not already, select your Board (in this case the SparkFun ESP32 IoT RedBoard), and associated COM port. Upload the code to the board and set the Arduino Serial Monitor to 115200 baud. Once there are enough satellites in view you should be able to see your coordinates and the number of satellites in view!</p>"},{"location":"single_page/#more-examples","title":"More Examples!","text":"<p>Now that you got it up and running, check out the SparkFun u-blox Arduino Library for other UART examples!</p> SparkFun_u-blox_GNSS_v3 &gt; examples"},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":""},{"location":"single_page/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"single_page/#resources","title":"Resources","text":"<p>Now that you've successfully got your SparkFun GNSS-RTK L1/L5 Breakout - NEO-F10N, SMA up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <p>SparkFun Resources</p> <ul> <li>Schematic (PDF)</li> <li>KiCad Files (ZIP)</li> <li>3D Model (STEP)</li> <li>Board Dimensions (PNG)</li> <li>Building a GPS System</li> <li>Arduino Library</li> <li>GitHub Hardware Repo</li> </ul> <p>u-blox NEO-F10N Resources</p> <ul> <li>Product Summary (PDF)</li> <li>Datasheet (PDF)</li> <li>Integration Manual (PDF)</li> <li>Interface Description (PDF)</li> <li>White Paper: Modern GNSS/GPS signals: Moving from Single-Band to Dual-Band (PDF)</li> <li>u-blox ECCN (PDF)</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"github/contribute/","title":"Contribute: Help Fix our Mistake!","text":"<p>Spot something wrong? Feel free to contribute our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun GNSS-RTK L1/L5 Breakout - NEO-F10N repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun GNSS-RTK L1/L5 Breakout - NEO-F10N repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-improvement","title":"Submit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design improvements</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvements, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provided some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun GNSS-RTK L1/L5 Breakout - NEO-F10N repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun GNSS-RTK L1/L5 Breakout - NEO-F10N repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"}]}